/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.EmergencyWardWorkArea;

import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Organization.HospitalEmergencyWardOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.Patient.VitalSign;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ayushi
 */
public class AddVitalCreateRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddVitalCreateRequestJPanel
     */
    private JPanel userProcessContainer;
    private HospitalEmergencyWardOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    public AddVitalCreateRequestJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.organization=(HospitalEmergencyWardOrganization) organization;
        this.userAccount=account;
        this.enterprise=enterprise;
        populateTablePatient();
    }

     public void populateTablePatient(){
        DefaultTableModel dtm = (DefaultTableModel)patientJTable.getModel();
        dtm.setRowCount(0);
        if(enterprise instanceof HospitalEnterprise){
        HospitalEnterprise he = (HospitalEnterprise)enterprise;
        for(Patient patient : he.getPatientDirectory().getPatientList()){
          
           Object[] row = new Object[3];
           row[0]=patient;
           row[1]=patient.getRoom_no();
           row[2]=patient.getStatus();
           dtm.addRow(row);
            
        }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        backMVJButton = new javax.swing.JButton();
        addVitalSignJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        viewPatientSignJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(154, 192, 205));

        backMVJButton.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        backMVJButton.setText("<<Back");
        backMVJButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        backMVJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backMVJButtonActionPerformed(evt);
            }
        });

        addVitalSignJButton.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        addVitalSignJButton.setText("Add Vital Sign");
        addVitalSignJButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addVitalSignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVitalSignJButtonActionPerformed(evt);
            }
        });

        patientJTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        patientJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "RoomNo", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientJTable);

        jLabel2.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N
        jLabel2.setText("    Manage Vital Sign ");

        viewPatientSignJButton.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        viewPatientSignJButton.setText("View Patient");
        viewPatientSignJButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        viewPatientSignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPatientSignJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel1)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(backMVJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(174, 174, 174)
                                .addComponent(viewPatientSignJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(addVitalSignJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(62, 62, 62))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel1)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addComponent(addVitalSignJButton)
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backMVJButton)
                    .addComponent(viewPatientSignJButton))
                .addGap(81, 81, 81))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backMVJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backMVJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
        
    }//GEN-LAST:event_backMVJButtonActionPerformed

    private void addVitalSignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVitalSignJButtonActionPerformed
        // TODO add your handling code here:
       BufferedReader br = null;
       String path =System.getProperty("user.dir") + "\\vs2.csv";
              //     "/Users/ayushi/Documents/NetBeansProjects/Project/vs2.csv";
       
       int selectedRow = patientJTable.getSelectedRow();
       //final String delimiter= ",";
        if (selectedRow >= 0) {
            
            Patient patient= (Patient)patientJTable.getValueAt(selectedRow, 0);
            
        try {
            br = new BufferedReader(new FileReader(new File(path)));
            String line="";
            while ((line = br.readLine()) != null) {
            String[] entries = line.split(",");
            System.out.println("respZrate" +entries[0]);
            System.out.println("heartrate" +entries[1]);
            System.out.println("bprate" +entries[2]);
            System.out.println("weightZrate" +entries[3]);
            System.out.println("oxygenrate" +entries[4]);
            System.out.println("bloodrate" +entries[5]);
            System.out.println("sugarrate" +entries[6]);
            System.out.println("tp" +entries[7]);
            int respiratoryRate =Integer.valueOf(entries[0]);
            int heartRate= Integer.valueOf(entries[1]);
            float bp = Float.parseFloat(entries[2]);
            float weight = Float.parseFloat(entries[3]);
            
            String status;
            int age = patient.getAge();
            if (age >= 1 && age <= 3) {

                        if ((respiratoryRate >= 20 && respiratoryRate <= 30) && (heartRate >= 80 && heartRate <= 130) && (bp >= 80 && bp <= 110) && (weight >= 22 && weight <= 31)) {
                            status = "Normal";
                        } else {
                            status = "Abnormal";
                        }

                    } else if (age >= 4 && age <= 5) {

                        if ((respiratoryRate >= 20 && respiratoryRate <= 30) && (heartRate >= 80 && heartRate <= 120) && (bp >= 80 && bp <= 110) && (weight >= 31 && weight <= 40)) {
                            status = "Normal";
                        } else {
                            status = "Abnormal";
                        }
                    } else if (age >= 6 && age <= 12) {

                        if ((respiratoryRate >= 20 && respiratoryRate <= 30) && (heartRate >= 70 && heartRate <= 110) && (bp >= 80 && bp <= 120) && (weight >= 41 && weight <= 92)) {
                            status = "Normal";
                        } else {
                            status = "Abnormal";
                        }

                    } else {

                        if ((respiratoryRate >= 12 && respiratoryRate <= 20) && (heartRate >= 55 && heartRate <= 105) && (bp >= 110 && bp <= 120) && (weight > 110)) {
                            status = "Normal";
                        } else {
                            status = "Abnormal";
                        }

                    }
            VitalSign vs = new VitalSign();
            vs.setRespiratoryRate(Integer.valueOf(entries[0]));
            vs.setHeartRate(Integer.valueOf(entries[1]));
            vs.setBp(Float.parseFloat(entries[2]));
            vs.setWeight(Float.parseFloat(entries[3]));
            vs.setOxygenInBlood(Integer.parseInt(entries[4]));
            vs.setBodyTemp(Float.parseFloat(entries[5]));
            vs.setBloodSugar(Integer.parseInt(entries[6]));
            vs.setTimestamp(entries[7]);
            vs.setStatus(status);
            patient.getVitalSignHistory().getVitalSignList().add(vs);
            
             
            }
             JOptionPane.showMessageDialog(null, "vital Sign added.");
            

        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        } finally {
            if(br!=null){
                try {
                    br.close();
                } catch (IOException e) {
                }
            }
          
            }
        System.out.println("Done");
        }
       else {
            JOptionPane.showMessageDialog(null, "Please select a request message to process.");
        }
    }//GEN-LAST:event_addVitalSignJButtonActionPerformed

    private void viewPatientSignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPatientSignJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow= patientJTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select row to view vital Signs","Warning", JOptionPane.WARNING_MESSAGE);
        }else{
            Patient patient= (Patient)patientJTable.getValueAt(selectedRow, 0);
            ViewPatient vps = new ViewPatient(userProcessContainer, patient);
            userProcessContainer.add("ViewPatient", vps);
            CardLayout layout = (CardLayout)userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_viewPatientSignJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addVitalSignJButton;
    private javax.swing.JButton backMVJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientJTable;
    private javax.swing.JButton viewPatientSignJButton;
    // End of variables declaration//GEN-END:variables
}
