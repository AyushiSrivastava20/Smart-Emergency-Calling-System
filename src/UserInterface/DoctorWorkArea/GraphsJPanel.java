/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorWorkArea;

import Business.Patient.Patient;
import Business.Patient.VitalSign;
import java.awt.CardLayout;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author ayushi
 */
public class GraphsJPanel extends javax.swing.JPanel  {

    /**
     * Creates new form GraphsJPanel
     */
    private JPanel userProcessContainer;
    private Patient patient;
    public GraphsJPanel(JPanel userProcessContainer,Patient patient ) {
        initComponents();
       
        this.userProcessContainer=userProcessContainer;
        this.patient=patient;
        
      
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        respRate = new javax.swing.JButton();
        heartRate = new javax.swing.JButton();
        bp = new javax.swing.JButton();
        oxygen = new javax.swing.JButton();
        backbutton = new javax.swing.JButton();
        ecg = new javax.swing.JButton();

        setBackground(new java.awt.Color(154, 192, 205));

        jLabel1.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N
        jLabel1.setText("Graphs of VitalSigns for Patient");

        respRate.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        respRate.setText("Graph of Respiratory Rate");
        respRate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        respRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respRateActionPerformed(evt);
            }
        });

        heartRate.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        heartRate.setText("Graph of Heart Rate");
        heartRate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        heartRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heartRateActionPerformed(evt);
            }
        });

        bp.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        bp.setText("Graph Of Blood Pressure");
        bp.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bpActionPerformed(evt);
            }
        });

        oxygen.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        oxygen.setText("Graph Of Oxygen in Blood");
        oxygen.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        oxygen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oxygenActionPerformed(evt);
            }
        });

        backbutton.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        backbutton.setText("<<Back");
        backbutton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        backbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbuttonActionPerformed(evt);
            }
        });

        ecg.setFont(new java.awt.Font("Calibri", 3, 15)); // NOI18N
        ecg.setText("ECG Graph");
        ecg.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ecg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ecgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(respRate)
                            .addComponent(bp))
                        .addGap(255, 255, 255)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(oxygen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(heartRate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(backbutton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(358, 358, 358)
                        .addComponent(ecg)))
                .addGap(121, 121, 121))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(104, 104, 104)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(respRate)
                    .addComponent(heartRate))
                .addGap(65, 65, 65)
                .addComponent(ecg)
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bp)
                    .addComponent(oxygen))
                .addGap(100, 100, 100)
                .addComponent(backbutton)
                .addGap(65, 65, 65))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void respRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respRateActionPerformed
        // TODO add your handling code here:
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        String series1 ="RespiratoryRate";
        String series2 ="Normal";
         for (VitalSign vs: patient.getVitalSignHistory().getVitalSignList()){
            dataset.addValue(vs.getRespiratoryRate(), series1, vs.getTimestamp());
            dataset.addValue(25, series2, vs.getTimestamp());
        }
          JFreeChart chart = ChartFactory.createLineChart("Respiratory Rate", "Sign","Values",dataset);
        chart.setBackgroundPaint(Color.WHITE);
        chart.getTitle().setPaint(Color.BLUE);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);
        
         ChartFrame frame = new ChartFrame ("Line Chart for Vital Sign", chart);
        frame.setVisible(true);
        frame.setSize(450,350);

           int width = 640; /* Width of the image */

           int height = 480; /* Height of the image */

           File chartImg = new File("RespRateChart"+patient.getPatientName()+".jpeg");
        try {
            ChartUtilities.saveChartAsJPEG(chartImg, chart, width, height);
        } catch (IOException ex) {
            Logger.getLogger(GraphsJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_respRateActionPerformed

    private void heartRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heartRateActionPerformed
        // TODO add your handling code here:
        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();
        String series1 ="HeartRate";
        String series2 ="NormalHeartRate";
        for (VitalSign vs: patient.getVitalSignHistory().getVitalSignList()){
        
            dataset1.addValue(vs.getHeartRate(), series1, vs.getTimestamp());
             dataset1.addValue(74, series2, vs.getTimestamp());
        }
        
        JFreeChart chart1 = ChartFactory.createLineChart("Heart Rate", "Vital Sign","Values",dataset1);
        chart1.setBackgroundPaint(Color.WHITE);
        chart1.getTitle().setPaint(Color.BLUE);
        CategoryPlot p1 = chart1.getCategoryPlot();
        p1.setRangeGridlinePaint(Color.black);
        
         ChartFrame frame = new ChartFrame ("Line Chart for Vital Sign", chart1);
        frame.setVisible(true);
        frame.setSize(450,350);
        int width = 640; /* Width of the image */

           int height = 480; /* Height of the image */

           File chartImg = new File("HeartRateChart"+patient.getPatientName()+".jpeg");
        try {
            ChartUtilities.saveChartAsJPEG(chartImg, chart1, width, height);
        } catch (IOException ex) {
            Logger.getLogger(GraphsJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_heartRateActionPerformed

    private void bpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bpActionPerformed
        // TODO add your handling code here
        
       DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();
        String series1 ="BloodPressure";
        String series2 ="NormalBloodPressure";
        for (VitalSign vs: patient.getVitalSignHistory().getVitalSignList()){
            dataset2.addValue(vs.getBp(), series1, vs.getTimestamp());
            dataset2.addValue(120, series2, vs.getTimestamp());
        }
        JFreeChart chart2 = ChartFactory.createLineChart("Blood Pressure", "Vital Sign","Values",dataset2);
        chart2.setBackgroundPaint(Color.WHITE);
        chart2.getTitle().setPaint(Color.BLUE);
        CategoryPlot p2 = chart2.getCategoryPlot();
        p2.setRangeGridlinePaint(Color.black);
          ChartFrame frame = new ChartFrame ("Line Chart for Vital Sign", chart2);
        frame.setVisible(true);
        frame.setSize(450,350);
        int width = 640; /* Width of the image */

           int height = 480; /* Height of the image */

           File chartImg = new File("BloodPressureChart"+patient.getPatientName()+".jpeg");
        try {
            ChartUtilities.saveChartAsJPEG(chartImg, chart2, width, height);
        } catch (IOException ex) {
            Logger.getLogger(GraphsJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bpActionPerformed

    private void oxygenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oxygenActionPerformed
        // TODO add your handling code here:
         
         
         
         DefaultCategoryDataset dataset3 = new DefaultCategoryDataset();
        String series1 ="OxygeInBlood";
        String series2 ="NormalOxygeInBlood";
        for (VitalSign vs: patient.getVitalSignHistory().getVitalSignList()){
            dataset3.addValue(vs.getOxygenInBlood(), series1, vs.getTimestamp());
            dataset3.addValue(95, series2, vs.getTimestamp());
        }

         JFreeChart chart3 = ChartFactory.createLineChart("Oxygen in Blood", "Vital Sign","Values",dataset3);
        chart3.setBackgroundPaint(Color.WHITE);
        chart3.getTitle().setPaint(Color.BLUE);
        CategoryPlot p3 = chart3.getCategoryPlot();
        p3.setRangeGridlinePaint(Color.black);
        
        ChartFrame frame = new ChartFrame ("Line Chart for Vital Sign", chart3);
        frame.setVisible(true);
        frame.setSize(450,350);
        int width = 640; /* Width of the image */

           int height = 480; /* Height of the image */

           File chartImg = new File("RespRateChart"+patient.getPatientName()+".jpeg");
        try {
            ChartUtilities.saveChartAsJPEG(chartImg, chart3, width, height);
        } catch (IOException ex) {
            Logger.getLogger(GraphsJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_oxygenActionPerformed

    private void backbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbuttonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backbuttonActionPerformed

    private void ecgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ecgActionPerformed
        // TODO add your handling code here:
        final String title = "Time Series Management";         
      final TimeSeries_AWT demo = new TimeSeries_AWT( title );         
      demo.pack( );         
      RefineryUtilities.positionFrameRandomly( demo );         
      demo.setVisible( true );
      //demo.setDefaultCloseOperation(0);
      
      
        
    }//GEN-LAST:event_ecgActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backbutton;
    private javax.swing.JButton bp;
    private javax.swing.JButton ecg;
    private javax.swing.JButton heartRate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton oxygen;
    private javax.swing.JButton respRate;
    // End of variables declaration//GEN-END:variables
}
